#+TITLE: Emacs Init File
#+AUTHOR: Lebohang Mokhwibitjane
#+DESCRIPTION: This is a basic initialization file for Emacs
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS

* System Setup
; sets emacs to start at full screen
(add-to-list 'default-frame-alist '(fullscreen . maximized))

(add-hook 'minibuffer-setup-hook 'my-minibuffer-setup)
(defun my-minibuffer-setup ()
       (set (make-local-variable 'face-remapping-alist)
            '((default :height 1.2))))

(electric-indent-mode -1)

(cua-mode 1)

(remove-hook 'minibuffer-setup-hook 'my-minibuffer-setup)

(add-to-list 'custom-theme-load-path "c:/Apps/ProgramData/Emacs/themes")
(load-theme 'earth-dark t)

; ################  VARIABLES  ##########################

(defvar new-all-icons-new-loadup nil)

(setq inhibit-startup-message t)
(tool-bar-mode -1)			; Disable tool bar
(tooltip-mode -1)			; Disable tooltips
(scroll-bar-mode -1)
(set-fringe-mode 10)		; Breathing room

;; Set visual bell
(setq visual-bell t)

(set-face-attribute 'default nil :font "Cascadia Code" :height 100)


;; ###############  KEYBINDINGS  #####################

;; Make ECS quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
(global-set-key (kbd "M-x") 'counsel-M-x)


;; (require 'packages)

; Display line numer and column number 
(display-line-numbers-mode)
(column-number-mode)

; Remove line numbers in shell mode
(dolist (mode '(org-mode-hook
		term-mode-hook
		shell-mode-hook
		echell-mode-hook))
  (add-hook mode (lambda ()(display-line-numbers-mode 0))))

(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("org" . "https://orgmode.org/elpa/")
			 ("elpa" . "https://elpa.gnu.org/packages/")))
(require 'package)
(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))



; ############################ GET PACKAGES ##############################

; install counsel
(unless (package-installed-p 'counsel)
  (package-install 'counsel))

; install use-package
(unless (package-installed-p 'use-package)
	(package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

(use-package command-log-mode)

; install ivy
(use-package ivy
	     :diminish
	     :bind(("C-s" . swiper)
	     :map ivy-minibuffer-map
	     ("TAB" . ivy-alt-done)
	     ("C-l" . ivy-alt-done)
	     ("C-j" . ivy-next-line)
	     ("C-k" . ivy-previous-line)
	     :map ivy-switch-buffer-map
	     ("C-k" . ivy-previous-line)
	     ("C-l" . ivy-done)
	     ("C-d" . ivy-switch-kill-buffer)
	     :map ivy-reverse-i-search-map
	     ("C-k" . ivy-previous-line)
	     ("C-d" . ivy-reverse-i-serach-kill))
	     :config
	     (ivy-mode 1)
)

(unless (package-installed-p 'all-the-icons)
  (setq  new-all-icons-new-loadup t))

(unless (equal new-all-icons-new-loadup nil)
  (nerd-icons-install-fonts)
  (all-the-icons-install-fonts)
)

(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t)
	)
    )
  )

(setq org-support-shift-select t)

(makunbound  'new-all-icons-new-loadup)

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))

(setq doom-modeline-height 35)

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package rainbow-mode
  :hook org-mode prog-mode)
(rainbow-mode)

;; (unless (package-installed-p 'ivy-rich)
;;   (package-install 'ivy-rich))
;; (ivy-rich-mode 1)

(use-package glsl-mode)
(autoload 'glsl-mode "glsl-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.glsl\\'" . glsl-mode))

